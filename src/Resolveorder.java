
import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.WritableCell;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author rinzin
 */
public class Resolveorder extends javax.swing.JFrame {

    /**
     * Creates new form Resolveorder
     */
    public Resolveorder() {
        initComponents();
    }
    int newrowinfo=1;
    String Newrow[]= new String[7];
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("Show Orders");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Roomloc");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Orders");

        jLabel5.setText("Drawer");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Equipment", "Subject", "Unit", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Which Equipment no. to resolve");

        jButton1.setText("Resolve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField5.setBackground(new java.awt.Color(204, 204, 204));
        jTextField5.setText(" ");
        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton3.setText("Back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Add locations");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2)
                    .addComponent(jButton3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jButton1)
                        .addGap(4, 4, 4)
                        .addComponent(jButton4))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jLabel5)
                                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 413, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Show Orders Button
        Workbook workbook = null;

        try {
            workbook = Workbook.getWorkbook(new File("Order.xls")); // get the workbook from the Order Excel File
        } catch (IOException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        }

        Sheet sheet = workbook.getSheet(0); // get the Order Sheet from the Excel file

        DefaultTableModel model=(DefaultTableModel)jTable1.getModel(); // Use the Table inbuilt method to input data into it
        for(int i=0; i<sheet.getRows()-1; i++){

            model.addRow(new Object[]{i+1,sheet.getCell(2,i+1).getContents(),sheet.getCell(0,i+1).getContents(),
                sheet.getCell(1,i+1).getContents(),sheet.getCell(3,i+1).getContents()});
        // adds all the data in the jTable1 from the Order Excel file
        }

        if (workbook!= null) {
            workbook.close(); // close the Workbook
        }
        
        System.out.println("tableshows");

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Resolve Order Button
        
         Workbook orderbook = null;

        try {
            orderbook = Workbook.getWorkbook(new File("Order.xls")); // get the workbook from the Order Excel File
        } catch (IOException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        }

        Sheet ordersheet = orderbook.getSheet(0); // get the Order Sheet from the Excel file
        
         int no= (int) Float.parseFloat(jTextField1.getText()); // convert value of jTextField1 into Integer value
            // get the values from the cells in the sheet
            String Equipname=ordersheet.getCell(2,no).getContents();
            String Sub=ordersheet.getCell(0,no).getContents();
            String Unit=ordersheet.getCell(1,no).getContents();
           String Quant=ordersheet.getCell(3,no).getContents();
         System.out.println(Sub+Unit+Quant);
            // assign variable to the corresponding input
            String Drawer=jTextField4.getText();
            String Roomno=jTextField3.getText();
            String Usern=ordersheet.getCell(4,no).getContents();//jTextField2.getText();
            
            
            Newrow[0]=Equipname;
            Newrow[1]=Sub;
            Newrow[2]=Unit;
            Newrow[3]=Roomno;
            Newrow[4]=Drawer;
            Newrow[5]=Quant;
            Newrow[6]=Usern;
            
            orderbook.close();
            
           // System.out.println(Newrow);
            System.out.println("order info's retrieved"); 
            
            
            
            // delete the orders resolved from the order excel file
            
            Workbook clearorder = null;
          
          
        try {
            clearorder = Workbook.getWorkbook(new File("Order.xls")); //call the workbook to access its sheet.
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
        WritableWorkbook Copy = null; //create a new writeableWorkbook
        try {
            Copy = clearorder.createWorkbook(new File("Order.xls"), clearorder); 
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
           

        WritableSheet CopySheet = Copy.getSheet(0); //get the record sheet
        int lastrow=CopySheet.getRows(); //get the last row
         
        System.out.println("nextinput"); //check code
        Scanner in=new Scanner(System.in); //check code

        
        //Adding cell data with the input value related to each column
        
        for(int i=0; i<5; i++){
             try {
                 CopySheet.addCell(new Label(i,no,""));
             } catch (WriteException ex) {
                 Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
             }
        }
           
       
        try {
            Copy.write(); //write the data
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
            
           
           
   
        try {
            Copy.close(); //close the workbook
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.println("order info cleared from order excel file");
     
     
     
     //open record excel file and compare if there are same equipments
      String finalquant = null;
      int row=0;
      
      String newinputfinalquant=null;
     
      Workbook recordcheck = null;

        try {
            recordcheck = Workbook.getWorkbook(new File("Record.xls")); // get the workbook from the Order Excel File
        } catch (IOException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        }

      Sheet recordsheet = recordcheck.getSheet(0); // get the Order Sheet from the Excel file
     
     
  
        
        for(int k=0; k<recordsheet.getRows()-1; k++){ // compares the Equipname and the cell data in the record sheet of Equipment column in lowercase
            
            System.out.println(recordsheet.getCell(0,k+1).getContents().toLowerCase()); //testcode
            System.out.println(Equipname.toLowerCase());
           System.out.println(recordsheet.getCell(0,k+1).getContents().toLowerCase().equals(Equipname.toLowerCase())==true);
            
            if(recordsheet.getCell(0,k+1).getContents().toLowerCase().equals(Equipname.toLowerCase())==true)  { 
                
               System.out.println(Integer.valueOf(Quant));
               System.out.println(Integer.valueOf(recordsheet.getCell(5,k+1).getContents()));
              
                //int recordquant=Integer.parseInt(recordsheet.getCell(5,k+1).getContents());
                int updatedquant=Integer.valueOf(Quant)+Integer.valueOf(recordsheet.getCell(5,k+1).getContents());
                System.out.println(updatedquant);
                finalquant=String.valueOf(updatedquant);
                System.out.println(finalquant);
                row=k+1;
                newrowinfo=0;
                
                k=recordsheet.getRows()-1;
            }
            
           
        }
        
        if(newrowinfo==1){
            
                System.out.println("new inputs will be recorded");
                jTextField5.setText("Enter the room no. and drawer no.");
                
        }
              
         System.out.println("quantity updated or location info input received");
         
         
         recordcheck.close();
         
         System.out.println(newrowinfo);
         
         
       /*  if(newrowinfo==1){
             while( Drawer==null && Roomno==null && Usern==null){
                 
                 System.out.println("input the locations info");
         }
         }   */
        //writing the final updated record file
        
        Workbook finalrecord = null;
          
          
        try {
            finalrecord = Workbook.getWorkbook(new File("Record.xls")); //call the workbook to access its sheet.
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
        WritableWorkbook frecord = null; //create a new writeableWorkbook
        try {
            frecord = finalrecord.createWorkbook(new File("Record.xls"), finalrecord); 
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
           

        WritableSheet fupdate = frecord.getSheet(0); //get the record sheet
        int lrow=fupdate.getRows(); //get the last row
        
         
        System.out.println("nextinput"); //check code
       

        
        //Adding cell data with the input value related to each column
        
        /*if(newrowinfo==1) { // new row of record
            
            for(int j=0; j<7; j++){
                
             try {
                 fupdate.addCell(new Label(j,lrow,Newrow[j]));
             } catch (WriteException ex) {
                 Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
             }
             System.out.println(Newrow[j]);
        
            }
             
             
              
        }*/
        
        
        if(newrowinfo==0){
            
            try {
             
                fupdate.addCell(new Label(5,row,finalquant)); 
             } catch (Exception ex) {
                 System.out.println("qqqqqqqq");
                 Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
             }
            
            try {
             
                fupdate.addCell(new Label(6,row,Newrow[6])); 
             } catch (Exception ex) {
                 System.out.println("qqqqqqqq");
                 Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
             }
            System.out.println(finalquant);
            System.out.println(row);
        }
       
        try {
            frecord.write(); //write the data
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
            
           
           
   
        try {
            frecord.close(); //close the workbook
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.println("resolveorder finished");
         

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
         dispose();
        MainUI M= new MainUI();
        M.setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
         
         Workbook finrecord = null;
        try {
            finrecord = Workbook.getWorkbook(new File("Record.xls")); //call the workbook to access its sheet.
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BiffException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
           
          
        WritableWorkbook frecord = null; //create a new writeableWorkbook
        try {
            frecord = finrecord.createWorkbook(new File("Record.xls"), finrecord); 
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
           

        WritableSheet fupdate = frecord.getSheet(0); //get the record sheet
        int lrow=fupdate.getRows(); //get the last row
        //lrow=lrow-6;
         
        System.out.println("nextinput"); //check code
       

        
        //Adding cell data with the input value related to each column
        
        if(newrowinfo==1) { // new row of record
            
            for(int j=0; j<7; j++){
                
             try {
                 fupdate.addCell(new Label(j,lrow,Newrow[j]));
             } catch (WriteException ex) {
                 Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
             }
             
                try {
                    fupdate.addCell(new Label(3,lrow,jTextField3.getText()));
                } catch (WriteException ex) {
                    Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
                }
                try {
                    fupdate.addCell(new Label(4,lrow,jTextField4.getText()));
                } catch (WriteException ex) {
                    Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
                }
             System.out.println(Newrow[j]);
        
            }
             
             
              
        }
        
        
        try {
            frecord.write(); //write the data
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
            
           
           
   
        try {
            frecord.close(); //close the workbook
        } catch (IOException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(Resolveorder.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        System.out.println("resolveorder finished");
        
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Resolveorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Resolveorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Resolveorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Resolveorder.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Resolveorder().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
