
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.table.DefaultTableModel;
import jxl.Cell;
import jxl.Sheet;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import java.util.Locale;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author rinzin
 */
public class ressolvee extends javax.swing.JFrame {

    /**
     * Creates new form ResolveOrder
     */
    public ressolvee() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 0, 18)); // NOI18N
        jLabel1.setText("Orders");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Equipment", "Subject", "Unit", "Quantity"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("Which Equipment no. to resolve");

        jTextField1.setText(" ");

        jButton1.setText("Resolve");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Username");

        jTextField2.setText(" ");

        jButton2.setText("Show Orders");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setText("Roomloc");

        jTextField3.setText(" ");

        jLabel5.setText("Drawer");

        jTextField4.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton2))
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(45, 45, 45)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField4))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 746, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(jButton1)))))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 346, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
       // Show Orders Button
        Workbook workbook = null;
       
           try {
               workbook = Workbook.getWorkbook(new File("Order.xls")); // get the workbook from the Order Excel File
           } catch (IOException ex) {
               Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
           } catch (BiffException ex) {
               Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
           }

            Sheet sheet = workbook.getSheet(0); // get the Order Sheet from the Excel file
            
            DefaultTableModel model=(DefaultTableModel)jTable1.getModel(); // Use the Table inbuilt method to input data into it 
           for(int i=0; i<sheet.getRows()-1; i++){
              
              model.addRow(new Object[]{i+1,sheet.getCell(2,i+1).getContents(),sheet.getCell(0,i+1).getContents(),
                  sheet.getCell(1,i+1).getContents(),sheet.getCell(3,i+1).getContents()}); 
              // adds all the data in the jTable1 from the Order Excel file
           }
           
           if (workbook!= null) {
                workbook.close(); // close the Workbook
            }
            
            
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Resolve Order Button
        Workbook resolve = null;
       
           try {
               resolve = Workbook.getWorkbook(new File("Order.xls")); // get the workbook from the Order Excel File
           } catch (IOException ex) {
               Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
           } catch (BiffException ex) {
               Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
           }

            Sheet sheet = resolve.getSheet(0); //get the Order sheet from the Excel File
             
            int no= (int) Float.parseFloat(jTextField1.getText())+1; // convert value of jTextField1 into Integer value
            // get the values from the cells in the sheet
            String Equipname=sheet.getCell(2,no).getContents();
            String Sub=sheet.getCell(0,no).getContents();
            String Unit=sheet.getCell(1,no).getContents();
            String Quant=String.valueOf(sheet.getCell(3,no).getContents());
            int QQ=Integer.parseInt(sheet.getCell(3,no).getContents());
            // assign variable to the corresponding input
            String Drawer=jTextField3.getText();
            String Roomno=jTextField4.getText();
            String Usern=jTextField2.getText();

            if (resolve!= null) {
                resolve.close(); // close the Workbook
            }
            
            
            
            
               
            //find the algorithm to check the same record so to update the quantity
            //if not, add a complete new record
            
            Workbook update = null;
           try {
               update = Workbook.getWorkbook(new File("Record.xls")); // get the workbook from the Record Excel File
           } catch (IOException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           } catch (BiffException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           
        WritableWorkbook Copy = null;
           try {
               Copy = Workbook.createWorkbook(new File("Record.xls"), update); // create workbook
           } catch (IOException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }

        WritableSheet CopySheet = Copy.getSheet(0); // get the Record Sheet
        System.out.println(CopySheet.getRows()); // test code
        int lastrow=CopySheet.getRows(); // finds the last row of cell data in the Record sheet
        int count = 0; // test code
        
        
        /* System.out.println(CopySheet.getCell(0,1).getContents().toLowerCase());
        System.out.println(Equipname.toLowerCase());
        System.out.println(CopySheet.getCell(0,1).getContents().toLowerCase().equals(Equipname.toLowerCase()));
       */
        
       for(int i=0; i<CopySheet.getRows()-1; i++){
            
            if(CopySheet.getCell(0,i+1).getContents().toLowerCase().equals(Equipname.toLowerCase())==true){  
            // compares the Equipname and the cell data in the record sheet of Equipment column in lowercase
                        
          String finalquantity= String.valueOf(Integer.parseInt(Quant)+Integer.parseInt(CopySheet.getCell(5,i+1).getContents())); 
                        
                      
                        try { 
                            CopySheet.addCell(new Label(5,i+1,finalquantity)); // change Quantity in the cell
                            CopySheet.addCell(new Label(6,i+1,Usern));
                        } catch (WriteException ex) {
                            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
                        }    
                  
            } else{ // if it is not equal
                
                // add a new record of Equipname,Sub, Unit, Roomno, Drawer, Quantity and Username
                
                try {
               CopySheet.addCell(new Label(0,lastrow,Equipname));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               CopySheet.addCell(new Label(1,lastrow,Sub));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               CopySheet.addCell(new Label(2,lastrow,Unit));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               CopySheet.addCell(new Label(3,lastrow,Roomno));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               CopySheet.addCell(new Label(4,lastrow,Drawer));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               CopySheet.addCell(new Label(5,lastrow,Quant));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
         
           try {
               CopySheet.addCell(new Label(6,lastrow,Usern));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
                
                
            }
       
       try {
               Copy.write(); // write the workbook
           } catch (IOException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               Copy.close(); //close the workbook
           } catch (IOException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           
           count=i+1;
           
        
       }
       
       
       
       Workbook wb = null;
       
           try {
                wb = Workbook.getWorkbook(new File("Order.xls")); // get the order excel file 
           } catch (IOException ex) {
               Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
           } catch (BiffException ex) {
               Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
           }

            
            WritableWorkbook Wbk = null;
           try {
               Wbk =wb.createWorkbook(new File("Order.xls"), update); // create wowrkbook
           } catch (IOException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           
           
           
           WritableSheet OrderSheet = Wbk.getSheet(0); // get Order sheet
           String input=null;
           
        try {
            OrderSheet.addCell(new Label(5,count,input));
        } catch (WriteException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        }
             
        try {
            Wbk.write(); //write the workbook
        } catch (IOException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            Wbk.close(); //close the workbook
        } catch (IOException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(ressolvee.class.getName()).log(Level.SEVERE, null, ex);
        }
       
            
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ressolvee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ressolvee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ressolvee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ressolvee.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ressolvee().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    // End of variables declaration//GEN-END:variables
}
