
import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import jxl.Workbook;
import jxl.read.biff.BiffException;
import jxl.write.Label;
import jxl.write.WritableSheet;
import jxl.write.WritableWorkbook;
import jxl.write.WriteException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author rinzin
 */
public class OrderGui extends javax.swing.JFrame {

    /**
     * Creates new form OrderGui
     */
    public OrderGui() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Order");

        jLabel2.setText("Subject");

        jLabel3.setText("Unit");

        jLabel4.setText("Equipment");

        jLabel5.setText("Quantity");

        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jButton1.setText("Order");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel6.setText("Username");

        jTextField5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField5ActionPerformed(evt);
            }
        });

        jButton2.setText("Back");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6))
                                .addGap(45, 45, 45)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 216, Short.MAX_VALUE)
                                    .addComponent(jTextField2)
                                    .addComponent(jTextField3)
                                    .addComponent(jTextField4)
                                    .addComponent(jTextField5))))
                        .addContainerGap(236, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 367, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(43, 43, 43))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(44, 44, 44)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addGap(29, 29, 29))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
      
        dispose();
        MainUI M= new MainUI();
        M.setVisible(true);
        
        //get input values through jTextField methods and it is stored in Invalue array
        String[] Invalue= new String[5];
        String Sub = jTextField1.getText();
        Invalue[0]=Sub;
        String Unit =jTextField2.getText();
        Invalue[1]=Unit;
        String Equip =jTextField3.getText();
        Invalue[2]=Equip;
        String Quant= jTextField4.getText();
        Invalue[3]=Quant;
        String Username=jTextField5.getText();
        Invalue[4]=Username;
        
        // Declare Order Excel File.
        File f= new File("Order.xls");
        
        if(!f.exists()){ //if the file doesn't exist
             WritableWorkbook workbook = null; 
        try {
           
            workbook = Workbook.createWorkbook(f); //create a workbook in the excel file
        } catch (IOException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }

      WritableSheet sheet=workbook.createSheet("Order", 0); //creates Order Sheet
	    System.out.println("The sheet created is named as :"+sheet.getName()); //test code
            
            
            /*
            Label lblEquip=new Label(0,0,"Sub"); 
            Label lblSub=new Label(1,0,"Unit");
            Label lblUnit=new Label(2,0,"Equip");
            Label lblRoomloc=new Label(3,0,"Quantity");
            Label lblUsername=new Label(4,0,"Username");
            
            */
            
            // Inputvalue array is to store the label of the sheet in the excel file.
            String[] Inputvalue= new String[5];
            String Subj="Sub";
            Inputvalue[0]=Subj;
            String Uni="Unit";
            Inputvalue[1]=Uni;
            String Equi="Equipment";
            Inputvalue[2]=Equi;
            String Quanti="Quantity";
            Inputvalue[3]=Quanti;
            String User="Username";
            Inputvalue[4]=User;
            
            // loop to add the label of the sheet
            for(int i=0; i<5; i++){  //  i<5 depicts no. of column to add the label in.
                
                 try {
                     sheet.addCell(new Label(i,0,Inputvalue[i])); // adding method
                 } catch (WriteException ex) {
                     Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
                 }
                
            } 
            
            
            //loop to add the input value of the corresponding data in the excel file
            for(int i=0; i<5; i++){ // i<5 depicts no. of column to add the input data in.
           
            try {
               sheet.addCell(new Label(i,1,Invalue[i])); // adding method
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
            
            }
        }
            
            /*
        try {
            sheet.addCell(lblEquip);
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sheet.addCell(lblSub);
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sheet.addCell(lblUnit);
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sheet.addCell(lblRoomloc);
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            sheet.addCell(lblUsername);
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
      
            
            
            
        try {
            sheet.addCell(new Label(0,1,Sub));
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sheet.addCell(new Label(1,1,Unit));
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sheet.addCell(new Label(2,1,Equip));
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sheet.addCell(new Label(3,1,Quant));
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        try {
            sheet.addCell(new Label(3,1,Username));
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        */
        
        try {
            workbook.write();
            workbook.close();
        } catch (IOException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        } catch (WriteException ex) {
            Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
         
    }                                        
   else{ //if the Excel Order file exists
       
        Workbook WorkBook = null;
           try {
               WorkBook = Workbook.getWorkbook(new File("Order.xls")); //get the workbook
           } catch (IOException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           } catch (BiffException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
        WritableWorkbook Copy = null;
           try {
               Copy = Workbook.createWorkbook(new File("Order.xls"), WorkBook); //create a workbook to write the data into
           } catch (IOException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }

        WritableSheet CopySheet = Copy.getSheet(0); // get the Order sheet
        int lastrow=CopySheet.getRows(); // get the last row of the Order sheet which already have datas in.
         
        System.out.println("nextinput"); // test code
        
        for(int i=0; i<5; i++){ // i<5 depicts no. of column to add the input data in.
           
            try {
               CopySheet.addCell(new Label(i,lastrow,Invalue[i])); // adding method
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
            
            }
        }
     
            /*

           try {
               CopySheet.addCell(new Label(0,lastrow,Sub));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               CopySheet.addCell(new Label(1,lastrow,Unit));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               CopySheet.addCell(new Label(2,lastrow,Equip));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               CopySheet.addCell(new Label(3,lastrow,Quant));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           
           try {
               CopySheet.addCell(new Label(4,lastrow,Username));
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           
         
        */

           try {
               Copy.write(); // write it in the workbook
           } catch (IOException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }
           try {
               Copy.close(); // close the workbook
           } catch (IOException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           } catch (WriteException ex) {
               Logger.getLogger(RecordGui.class.getName()).log(Level.SEVERE, null, ex);
           }


   }
       
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         dispose();
        MainUI M= new MainUI();
        M.setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(OrderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(OrderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(OrderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(OrderGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new OrderGui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
